/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarbase.stream.collector;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** State of the AggregateListCollector */
@org.apache.avro.specific.AvroGenerated
public class AggregateListState extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7205012371558577936L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AggregateListState\",\"namespace\":\"org.radarbase.stream.collector\",\"doc\":\"State of the AggregateListCollector\",\"fields\":[{\"name\":\"aggregates\",\"type\":{\"type\":\"array\",\"items\":[{\"type\":\"record\",\"name\":\"NumericAggregateState\",\"doc\":\"State of the NumericAggregateCollector\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Name of field or null if not belonging to a specific field.\",\"default\":null},{\"name\":\"pos\",\"type\":[\"null\",\"int\"],\"doc\":\"Position of field or null if not belonging to a specific field.\",\"default\":null},{\"name\":\"fieldType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Type of field or null if not belonging to a specific field.\",\"default\":null},{\"name\":\"count\",\"type\":\"long\",\"doc\":\"Number of values encountered.\"},{\"name\":\"min\",\"type\":[\"null\",\"double\"],\"doc\":\"Minimum value encountered or null if no value has been encountered.\",\"default\":null},{\"name\":\"max\",\"type\":[\"null\",\"double\"],\"doc\":\"Maximum value encountered or null if no value has been encountered.\",\"default\":null},{\"name\":\"sum\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"BigDecimalState\",\"fields\":[{\"name\":\"intVal\",\"type\":\"bytes\",\"doc\":\"java BigInteger integer value.\"},{\"name\":\"scale\",\"type\":\"int\",\"doc\":\"java BigDecimal scale.\"}]}],\"doc\":\"Sum encoded as Java BigDecimal bytes or null if no value has been encountered.\",\"default\":null},{\"name\":\"reservoir\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"SamplingReservoirState\",\"fields\":[{\"name\":\"samples\",\"type\":{\"type\":\"array\",\"items\":\"double\"},\"doc\":\"java BigInteger integer value.\"},{\"name\":\"count\",\"type\":\"long\",\"doc\":\"Number of values processed for samples.\"},{\"name\":\"maxSize\",\"type\":\"int\",\"doc\":\"Maximum size of the reservoir.\"}]}],\"doc\":\"Uniform sampling reservoir of values encountered. Null if reservoir sampling is disabled or no value has been encountered.\",\"default\":null}]}]},\"doc\":\"Collectors part of this aggregate.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AggregateListState> ENCODER =
      new BinaryMessageEncoder<AggregateListState>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AggregateListState> DECODER =
      new BinaryMessageDecoder<AggregateListState>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AggregateListState> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AggregateListState> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AggregateListState>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AggregateListState to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AggregateListState from a ByteBuffer. */
  public static AggregateListState fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Collectors part of this aggregate. */
  @Deprecated public java.util.List<java.lang.Object> aggregates;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AggregateListState() {}

  /**
   * All-args constructor.
   * @param aggregates Collectors part of this aggregate.
   */
  public AggregateListState(java.util.List<java.lang.Object> aggregates) {
    this.aggregates = aggregates;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return aggregates;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: aggregates = (java.util.List<java.lang.Object>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'aggregates' field.
   * @return Collectors part of this aggregate.
   */
  public java.util.List<java.lang.Object> getAggregates() {
    return aggregates;
  }

  /**
   * Sets the value of the 'aggregates' field.
   * Collectors part of this aggregate.
   * @param value the value to set.
   */
  public void setAggregates(java.util.List<java.lang.Object> value) {
    this.aggregates = value;
  }

  /**
   * Creates a new AggregateListState RecordBuilder.
   * @return A new AggregateListState RecordBuilder
   */
  public static org.radarbase.stream.collector.AggregateListState.Builder newBuilder() {
    return new org.radarbase.stream.collector.AggregateListState.Builder();
  }

  /**
   * Creates a new AggregateListState RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AggregateListState RecordBuilder
   */
  public static org.radarbase.stream.collector.AggregateListState.Builder newBuilder(org.radarbase.stream.collector.AggregateListState.Builder other) {
    return new org.radarbase.stream.collector.AggregateListState.Builder(other);
  }

  /**
   * Creates a new AggregateListState RecordBuilder by copying an existing AggregateListState instance.
   * @param other The existing instance to copy.
   * @return A new AggregateListState RecordBuilder
   */
  public static org.radarbase.stream.collector.AggregateListState.Builder newBuilder(org.radarbase.stream.collector.AggregateListState other) {
    return new org.radarbase.stream.collector.AggregateListState.Builder(other);
  }

  /**
   * RecordBuilder for AggregateListState instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AggregateListState>
    implements org.apache.avro.data.RecordBuilder<AggregateListState> {

    /** Collectors part of this aggregate. */
    private java.util.List<java.lang.Object> aggregates;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarbase.stream.collector.AggregateListState.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.aggregates)) {
        this.aggregates = data().deepCopy(fields()[0].schema(), other.aggregates);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AggregateListState instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarbase.stream.collector.AggregateListState other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.aggregates)) {
        this.aggregates = data().deepCopy(fields()[0].schema(), other.aggregates);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'aggregates' field.
      * Collectors part of this aggregate.
      * @return The value.
      */
    public java.util.List<java.lang.Object> getAggregates() {
      return aggregates;
    }

    /**
      * Sets the value of the 'aggregates' field.
      * Collectors part of this aggregate.
      * @param value The value of 'aggregates'.
      * @return This builder.
      */
    public org.radarbase.stream.collector.AggregateListState.Builder setAggregates(java.util.List<java.lang.Object> value) {
      validate(fields()[0], value);
      this.aggregates = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'aggregates' field has been set.
      * Collectors part of this aggregate.
      * @return True if the 'aggregates' field has been set, false otherwise.
      */
    public boolean hasAggregates() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'aggregates' field.
      * Collectors part of this aggregate.
      * @return This builder.
      */
    public org.radarbase.stream.collector.AggregateListState.Builder clearAggregates() {
      aggregates = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AggregateListState build() {
      try {
        AggregateListState record = new AggregateListState();
        record.aggregates = fieldSetFlags()[0] ? this.aggregates : (java.util.List<java.lang.Object>) defaultValue(fields()[0]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AggregateListState>
    WRITER$ = (org.apache.avro.io.DatumWriter<AggregateListState>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AggregateListState>
    READER$ = (org.apache.avro.io.DatumReader<AggregateListState>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
