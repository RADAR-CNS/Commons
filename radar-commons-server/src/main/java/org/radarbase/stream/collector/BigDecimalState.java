/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarbase.stream.collector;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BigDecimalState extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3761338442524893671L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BigDecimalState\",\"namespace\":\"org.radarbase.stream.collector\",\"fields\":[{\"name\":\"intVal\",\"type\":\"bytes\",\"doc\":\"java BigInteger integer value.\"},{\"name\":\"scale\",\"type\":\"int\",\"doc\":\"java BigDecimal scale.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BigDecimalState> ENCODER =
      new BinaryMessageEncoder<BigDecimalState>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BigDecimalState> DECODER =
      new BinaryMessageDecoder<BigDecimalState>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<BigDecimalState> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<BigDecimalState> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BigDecimalState>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this BigDecimalState to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a BigDecimalState from a ByteBuffer. */
  public static BigDecimalState fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** java BigInteger integer value. */
  @Deprecated public java.nio.ByteBuffer intVal;
  /** java BigDecimal scale. */
  @Deprecated public int scale;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BigDecimalState() {}

  /**
   * All-args constructor.
   * @param intVal java BigInteger integer value.
   * @param scale java BigDecimal scale.
   */
  public BigDecimalState(java.nio.ByteBuffer intVal, java.lang.Integer scale) {
    this.intVal = intVal;
    this.scale = scale;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return intVal;
    case 1: return scale;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: intVal = (java.nio.ByteBuffer)value$; break;
    case 1: scale = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'intVal' field.
   * @return java BigInteger integer value.
   */
  public java.nio.ByteBuffer getIntVal() {
    return intVal;
  }

  /**
   * Sets the value of the 'intVal' field.
   * java BigInteger integer value.
   * @param value the value to set.
   */
  public void setIntVal(java.nio.ByteBuffer value) {
    this.intVal = value;
  }

  /**
   * Gets the value of the 'scale' field.
   * @return java BigDecimal scale.
   */
  public java.lang.Integer getScale() {
    return scale;
  }

  /**
   * Sets the value of the 'scale' field.
   * java BigDecimal scale.
   * @param value the value to set.
   */
  public void setScale(java.lang.Integer value) {
    this.scale = value;
  }

  /**
   * Creates a new BigDecimalState RecordBuilder.
   * @return A new BigDecimalState RecordBuilder
   */
  public static org.radarbase.stream.collector.BigDecimalState.Builder newBuilder() {
    return new org.radarbase.stream.collector.BigDecimalState.Builder();
  }

  /**
   * Creates a new BigDecimalState RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BigDecimalState RecordBuilder
   */
  public static org.radarbase.stream.collector.BigDecimalState.Builder newBuilder(org.radarbase.stream.collector.BigDecimalState.Builder other) {
    return new org.radarbase.stream.collector.BigDecimalState.Builder(other);
  }

  /**
   * Creates a new BigDecimalState RecordBuilder by copying an existing BigDecimalState instance.
   * @param other The existing instance to copy.
   * @return A new BigDecimalState RecordBuilder
   */
  public static org.radarbase.stream.collector.BigDecimalState.Builder newBuilder(org.radarbase.stream.collector.BigDecimalState other) {
    return new org.radarbase.stream.collector.BigDecimalState.Builder(other);
  }

  /**
   * RecordBuilder for BigDecimalState instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BigDecimalState>
    implements org.apache.avro.data.RecordBuilder<BigDecimalState> {

    /** java BigInteger integer value. */
    private java.nio.ByteBuffer intVal;
    /** java BigDecimal scale. */
    private int scale;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarbase.stream.collector.BigDecimalState.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.intVal)) {
        this.intVal = data().deepCopy(fields()[0].schema(), other.intVal);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.scale)) {
        this.scale = data().deepCopy(fields()[1].schema(), other.scale);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing BigDecimalState instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarbase.stream.collector.BigDecimalState other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.intVal)) {
        this.intVal = data().deepCopy(fields()[0].schema(), other.intVal);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.scale)) {
        this.scale = data().deepCopy(fields()[1].schema(), other.scale);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'intVal' field.
      * java BigInteger integer value.
      * @return The value.
      */
    public java.nio.ByteBuffer getIntVal() {
      return intVal;
    }

    /**
      * Sets the value of the 'intVal' field.
      * java BigInteger integer value.
      * @param value The value of 'intVal'.
      * @return This builder.
      */
    public org.radarbase.stream.collector.BigDecimalState.Builder setIntVal(java.nio.ByteBuffer value) {
      validate(fields()[0], value);
      this.intVal = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'intVal' field has been set.
      * java BigInteger integer value.
      * @return True if the 'intVal' field has been set, false otherwise.
      */
    public boolean hasIntVal() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'intVal' field.
      * java BigInteger integer value.
      * @return This builder.
      */
    public org.radarbase.stream.collector.BigDecimalState.Builder clearIntVal() {
      intVal = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'scale' field.
      * java BigDecimal scale.
      * @return The value.
      */
    public java.lang.Integer getScale() {
      return scale;
    }

    /**
      * Sets the value of the 'scale' field.
      * java BigDecimal scale.
      * @param value The value of 'scale'.
      * @return This builder.
      */
    public org.radarbase.stream.collector.BigDecimalState.Builder setScale(int value) {
      validate(fields()[1], value);
      this.scale = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'scale' field has been set.
      * java BigDecimal scale.
      * @return True if the 'scale' field has been set, false otherwise.
      */
    public boolean hasScale() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'scale' field.
      * java BigDecimal scale.
      * @return This builder.
      */
    public org.radarbase.stream.collector.BigDecimalState.Builder clearScale() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BigDecimalState build() {
      try {
        BigDecimalState record = new BigDecimalState();
        record.intVal = fieldSetFlags()[0] ? this.intVal : (java.nio.ByteBuffer) defaultValue(fields()[0]);
        record.scale = fieldSetFlags()[1] ? this.scale : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BigDecimalState>
    WRITER$ = (org.apache.avro.io.DatumWriter<BigDecimalState>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BigDecimalState>
    READER$ = (org.apache.avro.io.DatumReader<BigDecimalState>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
