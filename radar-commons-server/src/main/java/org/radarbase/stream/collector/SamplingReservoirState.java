/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.radarbase.stream.collector;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SamplingReservoirState extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1201854451518305938L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SamplingReservoirState\",\"namespace\":\"org.radarbase.stream.collector\",\"fields\":[{\"name\":\"samples\",\"type\":{\"type\":\"array\",\"items\":\"double\"},\"doc\":\"java BigInteger integer value.\"},{\"name\":\"count\",\"type\":\"long\",\"doc\":\"Number of values processed for samples.\"},{\"name\":\"maxSize\",\"type\":\"int\",\"doc\":\"Maximum size of the reservoir.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SamplingReservoirState> ENCODER =
      new BinaryMessageEncoder<SamplingReservoirState>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SamplingReservoirState> DECODER =
      new BinaryMessageDecoder<SamplingReservoirState>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<SamplingReservoirState> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<SamplingReservoirState> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SamplingReservoirState>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this SamplingReservoirState to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a SamplingReservoirState from a ByteBuffer. */
  public static SamplingReservoirState fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** java BigInteger integer value. */
  @Deprecated public java.util.List<java.lang.Double> samples;
  /** Number of values processed for samples. */
  @Deprecated public long count;
  /** Maximum size of the reservoir. */
  @Deprecated public int maxSize;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SamplingReservoirState() {}

  /**
   * All-args constructor.
   * @param samples java BigInteger integer value.
   * @param count Number of values processed for samples.
   * @param maxSize Maximum size of the reservoir.
   */
  public SamplingReservoirState(java.util.List<java.lang.Double> samples, java.lang.Long count, java.lang.Integer maxSize) {
    this.samples = samples;
    this.count = count;
    this.maxSize = maxSize;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return samples;
    case 1: return count;
    case 2: return maxSize;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: samples = (java.util.List<java.lang.Double>)value$; break;
    case 1: count = (java.lang.Long)value$; break;
    case 2: maxSize = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'samples' field.
   * @return java BigInteger integer value.
   */
  public java.util.List<java.lang.Double> getSamples() {
    return samples;
  }

  /**
   * Sets the value of the 'samples' field.
   * java BigInteger integer value.
   * @param value the value to set.
   */
  public void setSamples(java.util.List<java.lang.Double> value) {
    this.samples = value;
  }

  /**
   * Gets the value of the 'count' field.
   * @return Number of values processed for samples.
   */
  public java.lang.Long getCount() {
    return count;
  }

  /**
   * Sets the value of the 'count' field.
   * Number of values processed for samples.
   * @param value the value to set.
   */
  public void setCount(java.lang.Long value) {
    this.count = value;
  }

  /**
   * Gets the value of the 'maxSize' field.
   * @return Maximum size of the reservoir.
   */
  public java.lang.Integer getMaxSize() {
    return maxSize;
  }

  /**
   * Sets the value of the 'maxSize' field.
   * Maximum size of the reservoir.
   * @param value the value to set.
   */
  public void setMaxSize(java.lang.Integer value) {
    this.maxSize = value;
  }

  /**
   * Creates a new SamplingReservoirState RecordBuilder.
   * @return A new SamplingReservoirState RecordBuilder
   */
  public static org.radarbase.stream.collector.SamplingReservoirState.Builder newBuilder() {
    return new org.radarbase.stream.collector.SamplingReservoirState.Builder();
  }

  /**
   * Creates a new SamplingReservoirState RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SamplingReservoirState RecordBuilder
   */
  public static org.radarbase.stream.collector.SamplingReservoirState.Builder newBuilder(org.radarbase.stream.collector.SamplingReservoirState.Builder other) {
    return new org.radarbase.stream.collector.SamplingReservoirState.Builder(other);
  }

  /**
   * Creates a new SamplingReservoirState RecordBuilder by copying an existing SamplingReservoirState instance.
   * @param other The existing instance to copy.
   * @return A new SamplingReservoirState RecordBuilder
   */
  public static org.radarbase.stream.collector.SamplingReservoirState.Builder newBuilder(org.radarbase.stream.collector.SamplingReservoirState other) {
    return new org.radarbase.stream.collector.SamplingReservoirState.Builder(other);
  }

  /**
   * RecordBuilder for SamplingReservoirState instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SamplingReservoirState>
    implements org.apache.avro.data.RecordBuilder<SamplingReservoirState> {

    /** java BigInteger integer value. */
    private java.util.List<java.lang.Double> samples;
    /** Number of values processed for samples. */
    private long count;
    /** Maximum size of the reservoir. */
    private int maxSize;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.radarbase.stream.collector.SamplingReservoirState.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.samples)) {
        this.samples = data().deepCopy(fields()[0].schema(), other.samples);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.count)) {
        this.count = data().deepCopy(fields()[1].schema(), other.count);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.maxSize)) {
        this.maxSize = data().deepCopy(fields()[2].schema(), other.maxSize);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SamplingReservoirState instance
     * @param other The existing instance to copy.
     */
    private Builder(org.radarbase.stream.collector.SamplingReservoirState other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.samples)) {
        this.samples = data().deepCopy(fields()[0].schema(), other.samples);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.count)) {
        this.count = data().deepCopy(fields()[1].schema(), other.count);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.maxSize)) {
        this.maxSize = data().deepCopy(fields()[2].schema(), other.maxSize);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'samples' field.
      * java BigInteger integer value.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getSamples() {
      return samples;
    }

    /**
      * Sets the value of the 'samples' field.
      * java BigInteger integer value.
      * @param value The value of 'samples'.
      * @return This builder.
      */
    public org.radarbase.stream.collector.SamplingReservoirState.Builder setSamples(java.util.List<java.lang.Double> value) {
      validate(fields()[0], value);
      this.samples = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'samples' field has been set.
      * java BigInteger integer value.
      * @return True if the 'samples' field has been set, false otherwise.
      */
    public boolean hasSamples() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'samples' field.
      * java BigInteger integer value.
      * @return This builder.
      */
    public org.radarbase.stream.collector.SamplingReservoirState.Builder clearSamples() {
      samples = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'count' field.
      * Number of values processed for samples.
      * @return The value.
      */
    public java.lang.Long getCount() {
      return count;
    }

    /**
      * Sets the value of the 'count' field.
      * Number of values processed for samples.
      * @param value The value of 'count'.
      * @return This builder.
      */
    public org.radarbase.stream.collector.SamplingReservoirState.Builder setCount(long value) {
      validate(fields()[1], value);
      this.count = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'count' field has been set.
      * Number of values processed for samples.
      * @return True if the 'count' field has been set, false otherwise.
      */
    public boolean hasCount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'count' field.
      * Number of values processed for samples.
      * @return This builder.
      */
    public org.radarbase.stream.collector.SamplingReservoirState.Builder clearCount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxSize' field.
      * Maximum size of the reservoir.
      * @return The value.
      */
    public java.lang.Integer getMaxSize() {
      return maxSize;
    }

    /**
      * Sets the value of the 'maxSize' field.
      * Maximum size of the reservoir.
      * @param value The value of 'maxSize'.
      * @return This builder.
      */
    public org.radarbase.stream.collector.SamplingReservoirState.Builder setMaxSize(int value) {
      validate(fields()[2], value);
      this.maxSize = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'maxSize' field has been set.
      * Maximum size of the reservoir.
      * @return True if the 'maxSize' field has been set, false otherwise.
      */
    public boolean hasMaxSize() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'maxSize' field.
      * Maximum size of the reservoir.
      * @return This builder.
      */
    public org.radarbase.stream.collector.SamplingReservoirState.Builder clearMaxSize() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SamplingReservoirState build() {
      try {
        SamplingReservoirState record = new SamplingReservoirState();
        record.samples = fieldSetFlags()[0] ? this.samples : (java.util.List<java.lang.Double>) defaultValue(fields()[0]);
        record.count = fieldSetFlags()[1] ? this.count : (java.lang.Long) defaultValue(fields()[1]);
        record.maxSize = fieldSetFlags()[2] ? this.maxSize : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SamplingReservoirState>
    WRITER$ = (org.apache.avro.io.DatumWriter<SamplingReservoirState>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SamplingReservoirState>
    READER$ = (org.apache.avro.io.DatumReader<SamplingReservoirState>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
