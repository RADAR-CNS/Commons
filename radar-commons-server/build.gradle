/*
 * Copyright 2017 The Hyve and King's College London
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

ext.moduleName = 'radar-commons-server'
ext.description = 'RADAR Common testing library mocking code and utilities.'

targetCompatibility = '1.8'
sourceCompatibility = '1.8'

repositories {
    maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local' }
}

dependencies {
    api project(':radar-commons')

    // For POJO classes and ConfigLoader
    implementation group: 'com.fasterxml.jackson.core' , name: 'jackson-databind' , version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jacksonVersion

    api group: 'org.apache.avro', name: 'avro', version: avroVersion

    implementation group: 'com.fasterxml.jackson.core' , name: 'jackson-databind' , version: jacksonVersion
    implementation group: 'org.apache.kafka', name: 'kafka-clients', version: kafkaVersion

    testImplementation group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    // Direct producer uses KafkaAvroSerializer if initialized
    testImplementation (group: 'io.confluent', name: 'kafka-avro-serializer', version: confluentVersion) {
        exclude group: 'com.101tec'
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
    testImplementation group: 'org.radarcns', name: 'radar-schemas-commons', version: radarSchemasVersion
    // Direct producer uses KafkaAvroSerializer if initialized
    testImplementation group: 'junit', name: 'junit', version: junitVersion
    testRuntime group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion
}

checkstyle {
    // ignore tests
    sourceSets = [sourceSets.main]
    ignoreFailures = false
}

pmd {
    // ignore tests
    sourceSets = [sourceSets.main]
    ignoreFailures = false
}

ext.sharedManifest = manifest {
    attributes("Implementation-Title": moduleName,
            "Implementation-Version": version)
}

jar {
    baseName moduleName
    manifest.from sharedManifest
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    baseName moduleName
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest.from sharedManifest
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    baseName moduleName
    classifier = 'javadoc'
    from javadoc.destinationDir
    manifest.from sharedManifest
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    publications {
        RadarCommonsServerPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId moduleName
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', description)
                root.appendNode('name', moduleName)
                root.appendNode('url', githubUrl)
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    override false
    publications 'RadarCommonsServerPublication'
    pkg {
        repo = project.group
        name = moduleName
        userOrg = 'radar-cns'
        desc = description
        licenses = ['Apache-2.0']
        websiteUrl = website
        issueTrackerUrl = issueUrl
        vcsUrl = githubUrl
        githubRepo = githubRepoName
        githubReleaseNotesFile = 'README.md'
        version {
            name = project.version
            desc = description
            vcsTag = System.getenv('TRAVIS_TAG')
            released = new Date()
        }
    }
}


artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
            password = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
            maven = true
        }
    }
}

artifactoryPublish {
    publications('RadarCommonsServerPublication')
}
