plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    id 'idea'
    id 'com.commercehub.gradle.plugin.avro-base' version '0.9.0'
    id 'jacoco'
    id 'pmd'
}

//---------------------------------------------------------------------------//
// Configuration                                                             //
//---------------------------------------------------------------------------//

version = '0.1-SNAPSHOT'

targetCompatibility = '1.7'
sourceCompatibility = '1.7'

ext.slf4jVersion = '1.7.21'
ext.kafkaVersion = '0.10.1.1'
ext.avroVersion = '1.8.1'
ext.confluentVersion = '3.1.2'
ext.log4jVersion = '2.7'
ext.findbugsVersion = '3.0.1'
ext.jacksonVersion='2.8.5'
ext.okhttpVersion = '3.5.0'
ext.okioVersion = '1.11.0'
ext.junitVersion = '4.12'
ext.mockitoVersion = '2.2.29'
ext.hamcrestVersion = '1.3'
ext.codacyVersion = '1.0.10'

//---------------------------------------------------------------------------//
// Sources and classpath configurations                                      //
//---------------------------------------------------------------------------//

sourceSets {
    // Note that just declaring this sourceset creates two configurations.
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

configurations {
    codacy
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven { url 'http://packages.confluent.io/maven/' }
    maven { url 'https://jitpack.io' }
    maven { url 'http://dl.bintray.com/typesafe/maven-releases' }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile group: 'org.slf4j', name:'slf4j-api', version: slf4jVersion

    // to implement producers and consumers
    compile group: 'org.apache.kafka', name: 'kafka-clients', version: kafkaVersion
    compile group: 'org.apache.avro', name: 'avro', version: avroVersion
    compile (group: 'io.confluent', name: 'kafka-avro-serializer', version: confluentVersion) {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'log4j'
        exclude group: 'jline'
        exclude group: 'com.101tec'
    }
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: findbugsVersion
    compile group: 'com.fasterxml.jackson.core' , name: 'jackson-databind' , version: jacksonVersion
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: okhttpVersion
    compile group: 'com.squareup.okio', name: 'okio', version: okioVersion

    testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    codacy group: 'com.github.codacy', name: 'codacy-coverage-reporter', version: codacyVersion
}

//---------------------------------------------------------------------------//
// AVRO file manipulation                                                    //
//---------------------------------------------------------------------------//
task generateAvro(type: com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask) {
    source("schema/common")
    outputDir = file("build/avro")
}

compileJava.source(generateAvro.outputs)
idea.module.sourceDirs += file("build/avro")

//---------------------------------------------------------------------------//
// Packaging                                                                 //
//---------------------------------------------------------------------------//


jar {
    manifest {
        attributes 'Implementation-Title': 'RADAR-CNS commons',
                    'Implementation-Version': version
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

//---------------------------------------------------------------------------//
// Build system metadata                                                     //
//---------------------------------------------------------------------------//
idea {
    module {
        downloadSources = true
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
}

task downloadDependencies(type: Exec) {
    configurations.codacy.files
    commandLine 'echo', 'Downloaded all dependencies'
}

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = 'com.codacy.CodacyCoverageReporter'
    classpath = configurations.codacy
    args = ['-l', 'Java', '-r', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"]
}


task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
    distributionUrl distributionUrl.replace("bin", "all")
}

