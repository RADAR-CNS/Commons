plugins {
    // Apply the java plugin to add support for Java
    id 'java-library'
    id 'idea'
    id 'com.commercehub.gradle.plugin.avro-base' version '0.9.0'
    id 'jacoco'
    id 'pmd'
    id "com.jfrog.bintray" version "1.7.3"
    id 'maven-publish'
}

//---------------------------------------------------------------------------//
// Configuration                                                             //
//---------------------------------------------------------------------------//

version = '0.1-alpha.5-SNAPSHOT'

targetCompatibility = '1.7'
sourceCompatibility = '1.7'

ext.slf4jVersion = '1.7.21'
ext.kafkaVersion = '0.10.1.1'
ext.avroVersion = '1.8.1'
ext.confluentVersion = '3.1.2'
ext.log4jVersion = '2.7'
ext.jacksonVersion='2.8.5'
ext.okhttpVersion = '3.6.0'
ext.okioVersion = '1.11.0'
ext.junitVersion = '4.12'
ext.mockitoVersion = '2.2.29'
ext.hamcrestVersion = '1.3'
ext.codacyVersion = '1.0.10'
ext.avroSourcesDir = file("src/avroSources/java")

//---------------------------------------------------------------------------//
// Sources and classpath configurations                                      //
//---------------------------------------------------------------------------//

configurations {
    codacy
    avroSources
    api.extendsFrom avroSources
}

sourceSets {
    // Note that just declaring this sourceset creates two configurations.
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
    avroSources {
        compileClasspath = configurations.avroSources
    }
    main {
        java {
            srcDir avroSourcesDir
        }
    }
}

compileJava {
    source += sourceSets.avroSources.java
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven { url 'http://packages.confluent.io/maven/' }
    maven { url 'https://jitpack.io' }
    maven { url 'http://dl.bintray.com/typesafe/maven-releases' }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    avroSources group: 'org.apache.avro', name: 'avro', version: avroVersion

    // to implement producers and consumers
    api group: 'org.apache.kafka', name: 'kafka-clients', version: kafkaVersion
    api group: 'com.squareup.okhttp3', name: 'okhttp', version: okhttpVersion

    // For POJO classes and ConfigLoader
    implementation group: 'com.fasterxml.jackson.core' , name: 'jackson-databind' , version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jacksonVersion

    // The data is serialized with okio
    implementation group: 'com.squareup.okio', name: 'okio', version: okioVersion

    // The production code uses the SLF4J logging API at compile time
    implementation group: 'org.slf4j', name:'slf4j-api', version: slf4jVersion

    testImplementation group: 'junit', name: 'junit', version: junitVersion
    testImplementation group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: hamcrestVersion
    testImplementation group: 'com.squareup.okhttp3', name: 'mockwebserver', version: okhttpVersion
    codacy group: 'com.github.codacy', name: 'codacy-coverage-reporter', version: codacyVersion
}

//---------------------------------------------------------------------------//
// AVRO file manipulation                                                    //
//---------------------------------------------------------------------------//
task generateAvro(type: com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask) {
    source("schema/common")
    outputDir = avroSourcesDir
}

compileAvroSourcesJava.dependsOn generateAvro
compileJava.dependsOn generateAvro

clean {
    delete avroSourcesDir
}

//---------------------------------------------------------------------------//
// Testing                                                                   //
//---------------------------------------------------------------------------//

tasks.matching {it instanceof Test}.all {
    def stdout = new LinkedList<String>()
    beforeTest { TestDescriptor td ->
        stdout.clear()
    }

    onOutput { TestDescriptor td, TestOutputEvent toe ->
        stdout.addAll(toe.getMessage().split('(?m)$'))
        while (stdout.size() > 100) {
            stdout.remove()
        }
    }

    afterTest { TestDescriptor td, TestResult tr ->
        if (tr.resultType == TestResult.ResultType.FAILURE) {
            println()
            print("${td.className}.${td.name} FAILED")
            if (stdout.empty) {
                println(" without any output")
            } else {
                println(" with last 100 lines of output:")
                println('=' * 100)
                stdout.each { print(it) }
                println('=' * 100)
            }
        }
    }

    testLogging {
        showExceptions = true
        showCauses = true
        showStackTraces = true
        exceptionFormat "full"
    }
}

//---------------------------------------------------------------------------//
// Build system metadata                                                     //
//---------------------------------------------------------------------------//
idea {
    module {
        downloadSources = true
        generatedSourceDirs += avroSourcesDir
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
}

task downloadDependencies(type: Exec) {
    configurations.codacy.files
    commandLine 'echo', 'Downloaded all dependencies'
}

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = 'com.codacy.CodacyCoverageReporter'
    classpath = configurations.codacy
    args = ['-l', 'Java', '-r', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"]
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "pre-release"
        }
    }
    developers {
        developer {
            id "radar-cns"
            name "Nivethika"
            email "nivethika@thehyve.nl"
        }
    }
}
// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.output
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    publications {
        RadarCommonsPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'org.radarcns'
            artifactId 'radar-commons'
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Common utilities library containing basic schemas, streaming features, testing bridges and utils.')
                root.appendNode('name', 'radar-commons')
                root.appendNode('url', 'https://github.com/RADAR-CNS/RADAR-Commons.git')
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = System.getenv('bintrayUser')? System.getenv('bintrayUser') : project.property('bintrayUser')
    key = System.getenv('bintrayApiKey') ? System.getenv('bintrayApiKey') : project.property('bintrayApiKey')
    override = false
    publications = ['RadarCommonsPublication']
    pkg {
        repo = 'org.radarcns'
        name = 'radar-commons'
        userOrg = 'radar-cns'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/RADAR-CNS/RADAR-Commons.git'
        version {
            name = project.version
            desc = 'RADAR-Commons unitilies: Initial snapshot'
            vcsTag = System.getenv('TRAVIS_TAG')
            released = new Date()
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
    distributionUrl distributionUrl.replace("bin", "all")
}
