/*
 * Copyright 2017 The Hyve and King's College London
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    // Get bintray version
    id "com.jfrog.bintray" version "1.7.3"
    id "com.jfrog.artifactory" version "4.4.18"
}

apply plugin: "com.jfrog.artifactory"

allprojects {
    // Apply the plugins
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'

    //---------------------------------------------------------------------------//
    // Configuration                                                             //
    //---------------------------------------------------------------------------//

    version = '0.6-SNAPSHOT'
    group = 'org.radarcns'
    ext.githubRepoName = 'RADAR-CNS/RADAR-Commons'

    ext.slf4jVersion = '1.7.21'
    ext.kafkaVersion = '0.10.2.1'
    ext.avroVersion = '1.8.1'
    ext.confluentVersion = '3.1.2'
    ext.log4jVersion = '2.7'
    ext.jacksonVersion = '2.8.5'
    ext.okhttpVersion = '3.6.0'
    ext.okioVersion = '1.11.0'
    ext.junitVersion = '4.12'
    ext.mockitoVersion = '2.2.29'
    ext.mathVersion = '3.0'
    ext.hamcrestVersion = '1.3'
    ext.codacyVersion = '1.0.10'
    ext.radarSchemasVersion = '0.2-alpha.3-SNAPSHOT'

    ext.githubUrl = 'https://github.com/' + githubRepoName + '.git'
    ext.issueUrl = 'https://github.com/' + githubRepoName + '/issues'
    ext.website = 'http://radar-cns.org'

    //---------------------------------------------------------------------------//
    // Dependencies                                                              //
    //---------------------------------------------------------------------------//
    repositories {
        jcenter()
        maven { url 'http://packages.confluent.io/maven/' }
        maven { url 'http://dl.bintray.com/typesafe/maven-releases' }
        flatDir {
            dirs "${project.rootDir}/libs"
        }
    }

    ext.pomConfig = {
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        developers {
            developer {
                id 'nivemaham'
                name 'Nivethika Mahasivam'
                email 'nivethika@thehyve.nl'
                organization 'The Hyve'
            }
            developer {
                id 'blootsvoets'
                name 'Joris Borgdorff'
                email 'joris@thehyve.nl'
                organization 'The Hyve'
            }
            developer {
                id 'fnobilia'
                name 'Francesco Nobilia'
                email 'francesco.nobilia@kcl.ac.uk'
                organization 'King\'s College London'
            }
        }
        issueManagement {
            system 'GitHub'
            url githubUrl + '/issues'
        }
        organization {
            name 'RADAR-CNS'
            url website
        }
        scm {
            connection 'scm:git:' + githubUrl
            url githubUrl
        }
    }

    idea {
        module {
            downloadSources = true
        }
    }

    //---------------------------------------------------------------------------//
    // Style checking                                                            //
    //---------------------------------------------------------------------------//

    checkstyle {
        // codacy version
        toolVersion '6.16'
        ignoreFailures false

        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    }

    pmd {
        // codacy version
        toolVersion = '5.5.2'
        ignoreFailures = false

        consoleOutput = true

        ruleSets = []
        ruleSetFiles = files(rootProject.file("config/pmd/ruleset.xml"))
    }


    tasks.matching { it instanceof Test }.all {
        def stdout = new LinkedList<String>()
        beforeTest { TestDescriptor td ->
            stdout.clear()
        }

        onOutput { TestDescriptor td, TestOutputEvent toe ->
            stdout.addAll(toe.getMessage().split('(?m)$'))
            while (stdout.size() > 100) {
                stdout.remove()
            }
        }

        afterTest { TestDescriptor td, TestResult tr ->
            if (tr.resultType == TestResult.ResultType.FAILURE) {
                println()
                print("${td.className}.${td.name} FAILED")
                if (stdout.empty) {
                    println(" without any output")
                } else {
                    println(" with last 100 lines of output:")
                    println('=' * 100)
                    stdout.each { print(it) }
                    println('=' * 100)
                }
            }
        }

        testLogging {
            showExceptions = true
            showCauses = true
            showStackTraces = true
            exceptionFormat "full"
        }
    }
}

targetCompatibility = '1.7'
sourceCompatibility = '1.7'

ext.description = 'RADAR Common utilities library containing streaming features and utils.'

//---------------------------------------------------------------------------//
// Sources and classpath configurations                                      //
//---------------------------------------------------------------------------//

configurations {
    codacy
}

// In this section you declare where to find the dependencies of your project
repositories {
    maven { url 'https://jitpack.io' }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    api group: 'org.apache.avro', name: 'avro', version: avroVersion

    // to implement producers and consumers
    api group: 'org.apache.kafka', name: 'kafka-clients', version: kafkaVersion
    api group: 'com.squareup.okhttp3', name: 'okhttp', version: okhttpVersion

    // For POJO classes and ConfigLoader
    implementation group: 'com.fasterxml.jackson.core' , name: 'jackson-databind' , version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jacksonVersion

    // The REST data is serialized with okio
    implementation group: 'com.squareup.okio', name: 'okio', version: okioVersion

    // The production code uses the SLF4J logging API at compile time
    implementation group: 'org.slf4j', name:'slf4j-api', version: slf4jVersion

    // Direct producer uses KafkaAvroSerializer if initialized
    testImplementation (group: 'io.confluent', name: 'kafka-avro-serializer', version: confluentVersion) {
        exclude group: 'com.101tec'
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
    testImplementation group: 'org.radarcns', name: 'radar-schemas-commons', version: radarSchemasVersion
    testImplementation group: 'junit', name: 'junit', version: junitVersion
    testImplementation group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: hamcrestVersion
    testImplementation group: 'com.squareup.okhttp3', name: 'mockwebserver', version: okhttpVersion

    codacy group: 'com.github.codacy', name: 'codacy-coverage-reporter', version: codacyVersion
}

//---------------------------------------------------------------------------//
// Testing                                                                   //
//---------------------------------------------------------------------------//
checkstyle {
    // ignore tests
    sourceSets = [sourceSets.main]
}

pmd {
    // ignore tests
    sourceSets = [sourceSets.main]
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
}

task downloadDependencies(type: Exec) {
    configurations.testRuntime.files
    configurations.codacy.files
    configurations.jacocoAnt.files
    commandLine 'echo', 'Downloaded all dependencies'
}

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = 'com.codacy.CodacyCoverageReporter'
    classpath = configurations.codacy
    args = ['-l', 'Java', '-r', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"]
}

//---------------------------------------------------------------------------//
// Build system metadata                                                     //
//---------------------------------------------------------------------------//

ext.sharedManifest = manifest {
    attributes("Implementation-Title": rootProject.name,
            "Implementation-Version": version)
}

jar {
    manifest.from sharedManifest
}
// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest.from sharedManifest
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    manifest.from sharedManifest
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives javadocJar
    archives sourcesJar
}

publishing {
    publications {
        RadarCommonsPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId rootProject.name
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', description)
                root.appendNode('name', rootProject.name)
                root.appendNode('url', githubUrl)
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    override = false
    publications = ['RadarCommonsPublication']
    pkg {
        repo = project.group
        name = rootProject.name
        userOrg = 'radar-cns'
        desc = description
        licenses = ['Apache-2.0']
        websiteUrl = website
        issueTrackerUrl = issueUrl
        vcsUrl = githubUrl
        githubRepo = githubRepoName
        githubReleaseNotesFile = 'README.md'
        version {
            name = project.version
            desc = description
            vcsTag = System.getenv('TRAVIS_TAG')
            released = new Date()
        }
    }
}

artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
            password = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
            maven = true
        }
    }
}

artifactoryPublish {
    publications('RadarCommonsPublication')
    publishBuildInfo = true   //Publish build-info to Artifactory (true by default)
    publishArtifacts = true   //Publish artifacts to Artifactory (true by default)
    publishPom = true   //Publish generated POM files to Artifactory (true by default).
    publishIvy = false //Publish generated Ivy descriptor files to Artifactory (true by default).
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
    distributionType 'all'
}
