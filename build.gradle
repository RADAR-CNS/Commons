/*
 * Copyright 2017 The Hyve and King's College London
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    // Get bintray version
    id 'com.jfrog.bintray' version '1.8.1' apply false
    id 'com.jfrog.artifactory' version '4.7.5' apply false
}

subprojects {
    // Apply the plugins
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'
    apply plugin: 'com.jfrog.artifactory'

    //---------------------------------------------------------------------------//
    // Configuration                                                             //
    //---------------------------------------------------------------------------//

    version = '0.11.0'
    group = 'org.radarcns'
    ext.githubRepoName = 'RADAR-CNS/RADAR-Commons'

    ext.slf4jVersion = '1.7.25'
    ext.kafkaVersion = '2.0.0'
    ext.avroVersion = '1.8.2'
    ext.confluentVersion = '5.0.0'
    ext.jacksonVersion = '2.9.7'
    ext.okhttpVersion = '3.11.0'
    ext.junitVersion = '4.12'
    ext.mockitoVersion = '2.13.0'
    ext.hamcrestVersion = '1.3'
    ext.codacyVersion = '2.0.1'
    ext.radarSchemasVersion = '0.4.0'
    ext.orgJsonVersion = '20170516'

    ext.githubUrl = 'https://github.com/' + githubRepoName + '.git'
    ext.issueUrl = 'https://github.com/' + githubRepoName + '/issues'
    ext.website = 'http://radar-cns.org'

    //---------------------------------------------------------------------------//
    // Dependencies                                                              //
    //---------------------------------------------------------------------------//
    repositories {
        jcenter()
        maven { url 'http://packages.confluent.io/maven/' }
        maven { url 'http://dl.bintray.com/typesafe/maven-releases' }
        flatDir {
            dirs "${project.rootDir}/libs"
        }
    }

    ext.pomConfig = {
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        developers {
            developer {
                id 'nivemaham'
                name 'Nivethika Mahasivam'
                email 'nivethika@thehyve.nl'
                organization 'The Hyve'
            }
            developer {
                id 'blootsvoets'
                name 'Joris Borgdorff'
                email 'joris@thehyve.nl'
                organization 'The Hyve'
            }
            developer {
                id 'fnobilia'
                name 'Francesco Nobilia'
                email 'francesco.nobilia@kcl.ac.uk'
                organization 'King\'s College London'
            }
        }
        issueManagement {
            system 'GitHub'
            url githubUrl + '/issues'
        }
        organization {
            name 'RADAR-CNS'
            url website
        }
        scm {
            connection 'scm:git:' + githubUrl
            url githubUrl
        }
    }

    idea {
        module {
            downloadSources = true
        }
    }

    //---------------------------------------------------------------------------//
    // Style checking                                                            //
    //---------------------------------------------------------------------------//

    checkstyle {
        // codacy version
        toolVersion '6.16'
        ignoreFailures false

        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    }

    pmd {
        // codacy version
        toolVersion = '5.5.2'
        ignoreFailures = false

        consoleOutput = true

        ruleSets = []
        ruleSetFiles = files(rootProject.file("config/pmd/ruleset.xml"))
    }


    tasks.matching { it instanceof Test }.all {
        def stdout = new LinkedList<String>()
        beforeTest { TestDescriptor td ->
            stdout.clear()
        }

        onOutput { TestDescriptor td, TestOutputEvent toe ->
            stdout.addAll(toe.getMessage().split('(?m)$'))
            while (stdout.size() > 100) {
                stdout.remove()
            }
        }

        afterTest { TestDescriptor td, TestResult tr ->
            if (tr.resultType == TestResult.ResultType.FAILURE) {
                println()
                print("${td.className}.${td.name} FAILED")
                if (stdout.empty) {
                    println(" without any output")
                } else {
                    println(" with last 100 lines of output:")
                    println('=' * 100)
                    stdout.each { print(it) }
                    println('=' * 100)
                }
            }
        }

        testLogging {
            showExceptions = true
            showCauses = true
            showStackTraces = true
            exceptionFormat "full"
        }
    }
}

wrapper {
    gradleVersion '4.10.2'
}
