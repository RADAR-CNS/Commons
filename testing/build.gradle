/*
 * Copyright 2017 The Hyve and King's College London
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'application'

mainClassName = 'org.radarcns.mock.MockProducer'

run {
    if (project.hasProperty("mockConfig")) {
        args project.property("mockConfig")
    } else {
        args 'mock.yml'
    }
}

ext.testingName = 'radar-commons-testing'
ext.description = 'RADAR Common testing library mocking code and utilities.'

targetCompatibility = '1.7'
sourceCompatibility = '1.7'

dependencies {
    api rootProject
    api group: 'org.apache.avro', name: 'avro', version: avroVersion
    api group: 'org.radarcns', name: 'radar-schemas-commons', version: radarSchemasVersion

    implementation group: 'com.fasterxml.jackson.core' , name: 'jackson-databind' , version: jacksonVersion

    runtimeOnly group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion

    // Direct producer uses KafkaAvroSerializer if initialized
    testImplementation group: 'junit', name: 'junit', version: junitVersion
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: hamcrestVersion
}

checkstyle {
    // ignore tests
    sourceSets = [sourceSets.main]
    ignoreFailures = false
}

pmd {
    // ignore tests
    sourceSets = [sourceSets.main]
    ignoreFailures = false
}

ext.sharedManifest = manifest {
    attributes("Implementation-Title": testingName,
            "Implementation-Version": version)
}

jar {
    baseName testingName
    manifest.from sharedManifest
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    baseName testingName
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest.from sharedManifest
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    baseName testingName
    classifier = 'javadoc'
    from javadoc.destinationDir
    manifest.from sharedManifest
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    publications {
        RadarCommonsTestingPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId testingName
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', description)
                root.appendNode('name', testingName)
                root.appendNode('url', githubUrl)
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    override = false
    publications = ['RadarCommonsTestingPublication']
    pkg {
        repo = project.group
        name = testingName
        userOrg = 'radar-cns'
        desc = description
        licenses = ['Apache-2.0']
        websiteUrl = website
        issueTrackerUrl = issueUrl
        vcsUrl = githubUrl
        githubRepo = githubRepoName
        githubReleaseNotesFile = 'README.md'
        version {
            name = project.version
            desc = description
            vcsTag = System.getenv('TRAVIS_TAG')
            released = new Date()
        }
    }
}